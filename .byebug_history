c
request
c
request.body
request
c
request.body
request
c
request.body
request
c
response.parsed_response
response
response = get(url)
get(url)
get(url, headers: headers)
c
request
c
url
request
c
cas
case
cas = Case.new(description: request.parsed_response["description"], user_id: request.parsed_response['user_id'])
c
exit
Case.new(description: request.parsed_response["description"], user_id: request.parsed_response['user_id'])
request
c
continue
request.parsed_response['user_id']
request.parsed_response['description']
request.parsed_response["description"]
request.parsed_response.description
request.parsed_response
request
exit
request
c
params
c
WebService.get_popsicle_summaries(session[:email])
popsicles
params
c
response
exit
also why isnt it parsed
still no ooooo
response
c
ah ok
response.parsed_response
response
c
wait
awhahuh
hmmmmh
response.parsed_response
response['role']
response
c
WebService.logon(params[:email], params[:password])
c
WebService.logon(params[:email], params[:password])
c
session
session[:email]
c
e
WebService.get_all_users
c
response
c
response
c
url
exit
response
continue
params
exit
c
exit
params
continue
params
continue
show_user_path(1)
show_user_path
page.to_json
page
page.json
page.text
page.body
page
continue
page.source
page.text
page.value
page.body
page.blank?
page.methods(false)
page.methods
page.text
page.body
page
exit
page.body
page
page open
page one
open page
page
page.has_content?("that")
page.has_content?("Jarlett Scohanson")
page.has_text?("Jarlett Scohanson")
jar_test
cap_test
desc
desc_test
continue
assert(false)
assert(true)
assert
has_content?('case')
has_content?('that over there')
has_content?('freind')
has_content?
has_content
page
page.has_content?('Jarlett Scohanson')
page.has_text?('Jarlett Scohanson')
has_text?('Jarlett Scohanson')
has_content?('Jarlett Scohanson')
has_link?('Jarlett Scohanson')
page.has_link?('Jarlett Scohanson')
jar_test
continue
page.has_content?("I knkw this isn't on the page")
page.has_content?("this isn't here")
page.has_content?("Friend")
page.has_content?(false)
page.has_content?
page
continue
get(url)
url
id
continue
WebService.get_single_user_by(@case.user_id.to_i)
@case.user_id.to_i
@case.user_id
@case
continue
params[:id]
params
continue
params
continue
params
continue
params[:description]
params
continue
params
continue
params
continue
params
params[:user_id]=3
params
continue
@case_id
@case
params[:id]
continue
params
id
continue
id
params
id
url= "#{BASE_URI}/#{EXTENSION}/#{USERS}/#{id}"
exit
continue
url
get(url)
request
continue
put(url, :query => {first_name: name[:first_name], last_name: name[:last_name]})
id
USERS
EXTENSION
BASE_URI
id
name
params
continue
params[:name]
params
continue
params
continue
params
continueparams
params
continue
JSON.parse(request.body)
request.body
request= get("#{BASE_URI}/#{EXTENSION}/#{ACCOUNTS}/#{id}")
request
JSON.parse(request)
JSON.parse(request.body)
get("#{BASE_URI}/#{EXTENSION}/#{ACCOUNTS}/#{id}")
continue
ACCOUNTS
EXTENSION
BASE_URI
get("#{BASE_URI}/#{EXTENSION}/#{ACCOUNTS}/#{id}")
c
continue
c
params
c
